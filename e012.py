#!/usr/bin/python
"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would 
be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""


def factors(number):
	listOut = [1]
	if number == 1:
		return listOut
	i = 2
	while i <  (number / 2) + 1 :
		if number % i == 0:
			listOut.append(i)
		i += 1
	
	listOut.append(number)
	return listOut

def countFactors(number):
	nTotal = 1
	if number == 1:
		return nTotal
	i = 2
	while i < (number / 2) + 1 :
		if number % i == 0:
			nTotal += 1
		i += 1
	nTotal += 1
	return nTotal	

#for x in [1,3,6,10,15,21,28]:
#	if len(x) > 500
#	print str(x) + " : " +str(factors(x))
i = 1
inc = 2
while True:
	#listFactors = factors(i)
	#print str(i) + " : " +str(listFactors)
	#print len(listFactors)
	#if len(listFactors) > 500:
	#	print str(i) + " : " +str(listFactors)
	#	break
	nFactors = countFactors(i)
	print str(i)+": " + str(nFactors)
	if nFactors > 500 :
		print ">>>>>>>" + str(i)
		break
	i += inc
	inc += 1
	



